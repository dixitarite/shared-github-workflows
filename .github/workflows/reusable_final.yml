name: _Angular Test and Build

on:
  workflow_call:
    inputs:
      node_version:
        required: false
        type: string
      coverage_threshold:
        required: false
        type: string
      project_path:
        required: false
        type: string
        default: '.'
      SONAR_TOKEN:
        required: false
        type: string
      CODACY_PROJECT_TOKEN:
        required: false
        type: string

jobs:
  setup:
    name: Setup & Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.setvars.outputs.node_version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Env Vars
        id: setvars
        run: |
          echo "node_version=${{ inputs.node_version || vars.NODE_VERSION }}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.setvars.outputs.node_version }}

      - name: Install Dependencies
        run: npm install
        working-directory: ${{ inputs.project_path }}

  lint:
    name: Lint Angular Code
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Lint Code with ESLint
        run: npx eslint . --ext .ts --config eslint.config.js --no-warn-ignored --max-warnings=0
        working-directory: ${{ inputs.project_path }}

  test:
    name: Run Tests & Generate Coverage
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Tests
        run: |
          mkdir -p test-results
          npx ng test --watch=false --browsers=ChromeHeadless --code-coverage --karma-config=karma.conf.js || true
        working-directory: ${{ inputs.project_path }}

      - name: Install Coverage Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov python3-pip
          pip3 install junit2html

      - name: Convert JUnit XML to HTML
        run: junit2html test-results/test-results.xml test-results/test-report.html
        working-directory: ${{ inputs.project_path }}

      - name: Check CRITICAL Test Failures
        run: |
          REPORT="./test-results/test-results.xml"
          if [[ -f "$REPORT" ]]; then
            FAILED_CRITICAL=$(awk '/<testcase/ {test=$0} /<failure/ {if (test ~ /\[CRITICAL\]/) print test}' "$REPORT" | wc -l)
            if [[ "$FAILED_CRITICAL" -gt 0 ]]; then
              echo "$FAILED_CRITICAL CRITICAL test(s) failed."
              exit 1
            else
              echo "All CRITICAL test cases passed."
            fi
          else
            echo "Test report not found."
          fi
        working-directory: ${{ inputs.project_path }}

  coverage:
    name: Enforce Coverage Threshold & Report
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate HTML Coverage Report
        run: |
          genhtml coverage/angular.io-example/coverage/lcov.info \
            --output-directory test-results/lcov-html \
            --title "Angular Test Coverage Report" \
            --show-details \
            --highlight \
            --legend
        working-directory: ${{ inputs.project_path }}

      - name: Beautify LCOV HTML
        run: |
          cp lcov-style.css test-results/lcov-html/
          sed -i 's|</head>|<link rel="stylesheet" href="lcov-style.css">\n</head>|' test-results/lcov-html/index.html
        working-directory: ${{ inputs.project_path }}

      - name: Enforce Coverage Threshold
        run: |
          FILE=coverage/angular.io-example/coverage/coverage-summary.json
          PCT=$(node -p "require('./$FILE').total.statements.pct")
          echo "Statements Coverage: $PCT%"
          if (( $(echo "$PCT < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "Coverage $PCT% below threshold $COVERAGE_THRESHOLD%"
            exit 1
          fi
        env:
          COVERAGE_THRESHOLD: ${{ inputs.coverage_threshold || vars.COVERAGE_THRESHOLD }}
        working-directory: ${{ inputs.project_path }}

  report:
    name: Upload Reports
    runs-on: ubuntu-latest
    needs: [test, coverage]
    steps:
      - name: Upload Coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: Angular-Coverage-HTML
          path: ${{ inputs.project_path }}/test-results/lcov-html/

      - name: Upload JUnit HTML
        uses: actions/upload-artifact@v4
        with:
          name: Angular-JUnit-HTML
          path: ${{ inputs.project_path }}/test-results/test-report.html

      - name: Upload JUnit XML
        uses: actions/upload-artifact@v4
        with:
          name: Angular-JUnit-XML
          path: ${{ inputs.project_path }}/test-results/test-results.xml

      - name: Upload Raw Coverage
        uses: actions/upload-artifact@v4
        with:
          name: Angular-Raw-Coverage
          path: ${{ inputs.project_path }}/coverage/

  sonar:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    if: ${{ inputs.SONAR_TOKEN != '' }}
    needs: coverage
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ inputs.SONAR_TOKEN }}

  codacy:
    name: Upload Coverage to Codacy
    runs-on: ubuntu-latest
    if: ${{ inputs.CODACY_PROJECT_TOKEN != '' }}
    needs: coverage
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Upload Coverage to Codacy
        run: |
          curl -Ls https://coverage.codacy.com/get.sh > codacy-coverage-reporter
          chmod +x codacy-coverage-reporter
          ./codacy-coverage-reporter report \
            --project-token="${{ inputs.CODACY_PROJECT_TOKEN }}" \
            --coverage-reports="${{ inputs.project_path }}/coverage/angular.io-example/coverage/lcov.info"
        working-directory: ${{ inputs.project_path }}

  build:
    name: Build Angular App
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Angular App
        run: npm run build -- --configuration production
        working-directory: ${{ inputs.project_path }}
