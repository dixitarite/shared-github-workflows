name: _Angular Test and Build

on:
  workflow_call:
    inputs:
      node_version:
        required: false
        type: string
      coverage_threshold:
        required: false
        type: string
      project_path:
        required: false
        type: string
        default: '.'
    secrets:
      SONAR_TOKEN:
        required: false
      CODACY_PROJECT_TOKEN:
        required: false

jobs:
  setup:
    name: Setup & Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.setvars.outputs.node_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set Env Vars
        id: setvars
        run: echo "node_version=${{ inputs.node_version || vars.NODE_VERSION }}" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.setvars.outputs.node_version }}

      - run: npm install
        working-directory: ${{ inputs.project_path }}

  lint:
    name: Lint Angular Code
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node_version }}

      - run: npm install
        working-directory: ${{ inputs.project_path }}

      - name: Lint Code
        run: npx eslint . --ext .ts --config eslint.config.cjs --no-warn-ignored --ignore-pattern coverage/
        working-directory: ${{ inputs.project_path }}

  test:
    name: Run Tests & Generate Coverage
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Create test-results directory
        run: mkdir -p test-results
        working-directory: ${{ inputs.project_path }}

      - name: Run Tests
        run: |
          echo "Running Angular tests..."
          npx ng test --watch=false --browsers=ChromeHeadless --code-coverage --karma-config=karma.conf.js || true
          echo "Tests completed."
          echo "Checking for test-results.xml..."
          find . -name "test-results.xml" || echo "Not found"
        working-directory: ${{ inputs.project_path }}

      - name: Install Coverage Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov python3-pip
          pip3 install junit2html

      - name: List contents of test-results
        run: ls -la test-results
        working-directory: ${{ inputs.project_path }}

      - name: Convert JUnit XML to HTML
        run: |
          if [ -f "./test-results/test-results.xml" ]; then
            echo "‚úÖ Found test-results.xml. Converting to HTML..."
            junit2html ./test-results/test-results.xml ./test-results/test-report.html
          else
            echo "::warning::‚ùå test-results.xml not found at ./test-results. Skipping HTML conversion."
            ls -la ./test-results || echo "Directory test-results not found"
          fi
        working-directory: ${{ inputs.project_path }}

      - name: Check CRITICAL Test Failures
        run: |
          REPORT="./test-results/test-results.xml"
          if [[ -f "$REPORT" ]]; then
            FAILED_CRITICAL=$(awk '/<testcase/ {test=$0} /<failure/ {if (test ~ /\[CRITICAL\]/) print test}' "$REPORT" | wc -l)
            if [[ "$FAILED_CRITICAL" -gt 0 ]]; then
              echo "$FAILED_CRITICAL CRITICAL test(s) failed."
              exit 1
            else
              echo "‚úÖ All CRITICAL test cases passed."
            fi
          else
            echo "::warning::Test report not found at $REPORT"
          fi
        working-directory: ${{ inputs.project_path }}

  coverage:
  name: Enforce Coverage Threshold & Report
  runs-on: ubuntu-latest
  needs: test
  steps:
    - uses: actions/checkout@v4

    - name: Download Coverage Artifact
      uses: actions/download-artifact@v4
      with:
        name: raw-coverage
        path: ${{ inputs.project_path }}/coverage

    - name: Install lcov
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov

    - name: Debug Coverage Paths
      run: |
        echo "Showing contents of coverage directory..."
        find coverage -type f
        echo "Trying to read lcov.info"
        cat coverage/angular.io-example/coverage/lcov.info || echo "lcov.info not found"
      working-directory: ${{ inputs.project_path }}

    - name: Generate HTML Coverage Report
      run: |
        genhtml coverage/angular.io-example/coverage/lcov.info \
          --output-directory test-results/lcov-html \
          --title "Angular Test Coverage Report" \
          --show-details \
          --highlight \
          --legend
      working-directory: ${{ inputs.project_path }}


  report:
    name: Upload Reports
    runs-on: ubuntu-latest
    needs: [test, coverage]
    steps:
      - uses: actions/upload-artifact@v4
        with:
          name: Angular-Coverage-HTML
          path: ${{ inputs.project_path }}/test-results/lcov-html/

      - uses: actions/upload-artifact@v4
        with:
          name: Angular-JUnit-HTML
          path: ${{ inputs.project_path }}/test-results/test-report.html

      - uses: actions/upload-artifact@v4
        with:
          name: Angular-JUnit-XML
          path: ${{ inputs.project_path }}/test-results/test-results.xml

      - uses: actions/upload-artifact@v4
        with:
          name: Angular-Raw-Coverage
          path: ${{ inputs.project_path }}/coverage/

  sonar:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - uses: actions/checkout@v4
      - run: |
          if [ -n "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "üîç Running SonarQube scan..."
            sonar-scanner -Dsonar.login="${{ secrets.SONAR_TOKEN }}"
          else
            echo "::warning::No SONAR_TOKEN set. Skipping scan."
          fi

  codacy:
    name: Upload Coverage to Codacy
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - uses: actions/checkout@v4
      - run: |
          if [ -n "${{ secrets.CODACY_PROJECT_TOKEN }}" ]; then
            echo "üì§ Uploading coverage to Codacy..."
            curl -Ls https://coverage.codacy.com/get.sh > codacy-coverage-reporter
            chmod +x codacy-coverage-reporter
            ./codacy-coverage-reporter report \
              --project-token="${{ secrets.CODACY_PROJECT_TOKEN }}" \
              --coverage-reports="${{ inputs.project_path }}/coverage/angular.io-example/coverage/lcov.info"
          else
            echo "::warning::No CODACY_PROJECT_TOKEN set. Skipping Codacy upload."
          fi
        working-directory: ${{ inputs.project_path }}

  build:
    name: Build Angular App
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node_version }}

      - run: npm install
        working-directory: ${{ inputs.project_path }}

      - name: Build Angular App
        run: npx ng build --configuration production
        working-directory: ${{ inputs.project_path }}
